{{#> layout}}
<div class="container-fluid" id="overview">
  <div class="row py-3 pt-5 mt-5">
    <div class="col">
      <h2 class="text-center">Overview</h2>
    </div>
  </div>
  <div class="row py-3 mx-lg-3">
    <div class="col-12 col-lg-4">
      <div id="chart-overview-1" class="donut" data-src="confirmed" data-title="Confirmed" data-topn="9"></div>
    </div>
    <div class="col-12 col-lg-4">
      <div id="chart-overview-2" class="donut" data-src="deaths" data-title="Deaths" data-topn="7"></div>
    </div>
    <div class="col-12 col-lg-4">
      <div id="chart-overview-3" class="donut" data-src="recovered" data-title="Recovered" data-topn="7"></div>
    </div>
  </div>
  <div class="row py-3 mx-lg-3">
    <div class="col-12 col-lg-2"></div>
    <div class="col-12 col-lg-8">
      <div id="worldMap"></div>
      <div id="worldMapPlayback" class="py-2 text-center">
        <button type="button" class="btn btn-pink btn-rounded btn-sm btn-fast-backward">
          <i class="fas fa-fast-backward"></i>
        </button>
        <button type="button" class="btn btn-pink btn-rounded btn-sm btn-play">
          <i class="fas fa-play"></i>
        </button>
        <button type="button" class="btn btn-pink btn-rounded btn-sm btn-pause d-none">
          <i class="fas fa-pause"></i>
        </button>
        <button type="button" class="btn btn-pink btn-rounded btn-sm btn-fast-forward">
          <i class="fas fa-fast-forward"></i>
        </button>
      </div>
      <input type="range" id="worldMapSlider" class="my-custom-range"/>
      <div id="worldMapSliderLabels" class="py-2">
        <div class="slider-lower float-left"></div>
        <div class="slider-upper float-right"></div>
        <div class="slider-current text-center font-weight-bold"></div>
      </div>
    </div>
    <div class="col-12 col-lg-2"></div>
  </div>
</div>
<div class="container-fluid" id="world">
  <div class="row py-3 pt-5 mt-5">
    <div class="col">
      <h2 class="text-center">World Trend</h2>
    </div>
  </div>
  <div class="row py-3 mx-lg-3">
    <div class="col-12 col-lg-4">
      <div id="chart-world-1" class="chart" data-src="confirmed" data-view="china-world" data-title="Confirmed"></div>
    </div>
    <div class="col-12 col-lg-4">
      <div id="chart-world-2" class="chart" data-src="deaths" data-view="china-world" data-title="Deaths"></div>
    </div>
    <div class="col-12 col-lg-4">
      <div id="chart-world-3" class="chart" data-src="recovered" data-view="china-world" data-title="Recovered"></div>
    </div>
  </div>
  <div class="row py-3 mx-lg-3">
    <div class="col-12 col-lg-4">
      <div id="chart-world-1" class="chart" data-src="confirmed" data-title="Confirmed (> 10000)" data-min="10000"></div>
    </div>
    <div class="col-12 col-lg-4">
      <div id="chart-world-2" class="chart" data-src="deaths" data-title="Deaths (> 1000)" data-min="1000"></div>
    </div>
    <div class="col-12 col-lg-4">
      <div id="chart-world-3" class="chart" data-src="recovered" data-title="Recovered (> 1000)" data-min="1000"></div>
    </div>
  </div>
</div>
<div class="container-fluid" id="top9">
  <div class="row py-3 pt-3 mt-3">
    <div class="col">
      <h2 class="text-center">Top 9 (Confirmed)</h2>
    </div>
  </div>
  <div class="row py-3 mx-lg-3">
    <div class="col-12 col-lg-4">
      <div id="chart-us" class="chart" data-src="confirmed" data-country="US"></div>
    </div>
    <div class="col-12 col-lg-4">
      <div id="chart-it" class="chart" data-src="confirmed" data-country="Italy"></div>
    </div>
    <div class="col-12 col-lg-4">
      <div id="chart-cn" class="chart" data-src="confirmed" data-country="China"></div>
    </div>
    <div class="col-12 col-lg-4">
      <div id="chart-es" class="chart" data-src="confirmed" data-country="Spain"></div>
    </div>
    <div class="col-12 col-lg-4">
      <div id="chart-de" class="chart" data-src="confirmed" data-country="Germany"></div>
    </div>
    <div class="col-12 col-lg-4">
      <div id="chart-ir" class="chart" data-src="confirmed" data-country="Iran"></div>
    </div>
    <div class="col-12 col-lg-4">
      <div id="chart-fr" class="chart" data-src="confirmed" data-country="France"></div>
    </div>
    <div class="col-12 col-lg-4">
      <div id="chart-ch" class="chart" data-src="confirmed" data-country="Switzerland"></div>
    </div>
    <div class="col-12 col-lg-4">
      <div id="chart-uk" class="chart" data-src="confirmed" data-country="United Kingdom"></div>
    </div>
  </div>
</div>
<div class="container-fluid" id="europe">
  <div class="row py-3 pt-3 mt-3">
    <div class="col">
      <h2 class="text-center">Europe (Confirmed)</h2>
    </div>
  </div>
  <div class="row py-3 mx-lg-3">
    <div class="col-12 col-lg-4">
      <div id="chart-nl" class="chart" data-src="confirmed" data-country="Netherlands"></div>
    </div>
    <div class="col-12 col-lg-4">
      <div id="chart-at" class="chart" data-src="confirmed" data-country="Austria"></div>
    </div>
    <div class="col-12 col-lg-4">
      <div id="chart-be" class="chart" data-src="confirmed" data-country="Belgium"></div>
    </div>
    <div class="col-12 col-lg-4">
      <div id="chart-no" class="chart" data-src="confirmed" data-country="Norway"></div>
    </div>
    <div class="col-12 col-lg-4">
      <div id="chart-pt" class="chart" data-src="confirmed" data-country="Portugal"></div>
    </div>
    <div class="col-12 col-lg-4">
      <div id="chart-se" class="chart" data-src="confirmed" data-country="Sweden"></div>
    </div>
  </div>
</div>
<div class="container-fluid" id="americas">
  <div class="row py-3 pt-3 mt-3">
    <div class="col">
      <h2 class="text-center">Americas (Confirmed)</h2>
    </div>
  </div>
  <div class="row py-3 mx-lg-3">
    <div class="col-12 col-lg-4">
      <div id="chart-ca" class="chart" data-src="confirmed" data-country="Canada"></div>
    </div>
    <div class="col-12 col-lg-4">
      <div id="chart-br" class="chart" data-src="confirmed" data-country="Brazil"></div>
    </div>
    <div class="col-12 col-lg-4">
      <div id="chart-ec" class="chart" data-src="confirmed" data-country="Ecuador"></div>
    </div>
    <div class="col-12 col-lg-4">
      <div id="chart-cl" class="chart" data-src="confirmed" data-country="Chile"></div>
    </div>
    <div class="col-12 col-lg-4">
      <div id="chart-pe" class="chart" data-src="confirmed" data-country="Peru"></div>
    </div>
    <div class="col-12 col-lg-4">
      <div id="chart-co" class="chart" data-src="confirmed" data-country="Colombia"></div>
    </div>
  </div>
</div><div class="container-fluid" id="apac">
  <div class="row py-3 pt-3 mt-3">
    <div class="col">
      <h2 class="text-center">APAC (Confirmed)</h2>
    </div>
  </div>
  <div class="row py-3 mx-lg-3">
    <div class="col-12 col-lg-4">
      <div id="chart-hk" class="chart" data-src="confirmed" data-country="Hong Kong"></div>
    </div>
    <div class="col-12 col-lg-4">
      <div id="chart-kr" class="chart" data-src="confirmed" data-country="Korea, South"></div>
    </div>
    <div class="col-12 col-lg-4">
      <div id="chart-au" class="chart" data-src="confirmed" data-country="Australia"></div>
    </div>
    <div class="col-12 col-lg-4">
      <div id="chart-my" class="chart" data-src="confirmed" data-country="Malaysia"></div>
    </div>
    <div class="col-12 col-lg-4">
      <div id="chart-jp" class="chart" data-src="confirmed" data-country="Japan"></div>
    </div>
    <div class="col-12 col-lg-4">
      <div id="chart-sg" class="chart" data-src="confirmed" data-country="Singapore"></div>
    </div>
  </div>
</div>
<div class="container-fluid" id="central-south-asia">
  <div class="row py-3 pt-3 mt-3">
    <div class="col">
      <h2 class="text-center">Central/South Asia (Confirmed)</h2>
    </div>
  </div>
  <div class="row py-3 mx-lg-3">
    <div class="col-12 col-lg-4">
      <div id="chart-pk" class="chart" data-src="confirmed" data-country="Pakistan"></div>
    </div>
    <div class="col-12 col-lg-4">
      <div id="chart-ru" class="chart" data-src="confirmed" data-country="Russia"></div>
    </div>
    <div class="col-12 col-lg-4">
      <div id="chart-in" class="chart" data-src="confirmed" data-country="India"></div>
    </div>
  </div>
</div>
<div class="container-fluid" id="middle-east">
  <div class="row py-3 pt-3 mt-3">
    <div class="col">
      <h2 class="text-center">Middle East (Confirmed)</h2>
    </div>
  </div>
  <div class="row py-3 mx-lg-3">
    <div class="col-12 col-lg-4">
      <div id="chart-tr" class="chart" data-src="confirmed" data-country="Turkey"></div>
    </div>
    <div class="col-12 col-lg-4">
      <div id="chart-il" class="chart" data-src="confirmed" data-country="Israel"></div>
    </div>
    <div class="col-12 col-lg-4">
      <div id="chart-sa" class="chart" data-src="confirmed" data-country="Saudi Arabia"></div>
    </div>
    <div class="col-12 col-lg-4">
      <div id="chart-qa" class="chart" data-src="confirmed" data-country="Qatar"></div>
    </div>
    <div class="col-12 col-lg-4">
      <div id="chart-eg" class="chart" data-src="confirmed" data-country="Egypt"></div>
    </div>
    <div class="col-12 col-lg-4">
      <div id="chart-bh" class="chart" data-src="confirmed" data-country="Bahrain"></div>
    </div>
  </div>
</div>
<div class="container-fluid" id="africa">
  <div class="row py-3 pt-3 mt-3">
    <div class="col">
      <h2 class="text-center">Africa (Confirmed)</h2>
    </div>
  </div>
  <div class="row py-3 mx-lg-3">
    <div class="col-12 col-lg-4">
      <div id="chart-za" class="chart" data-src="confirmed" data-country="South Africa"></div>
    </div>
    <div class="col-12 col-lg-4">
      <div id="chart-dz" class="chart" data-src="confirmed" data-country="Algeria"></div>
    </div>
    <div class="col-12 col-lg-4">
      <div id="chart-ma" class="chart" data-src="confirmed" data-country="Morocco"></div>
    </div>
    <div class="col-12 col-lg-4">
      <div id="chart-tn" class="chart" data-src="confirmed" data-country="Tunisia"></div>
    </div>
    <div class="col-12 col-lg-4">
      <div id="chart-bf" class="chart" data-src="confirmed" data-country="Burkina Faso"></div>
    </div>
    <div class="col-12 col-lg-4">
      <div id="chart-sn" class="chart" data-src="confirmed" data-country="Senegal"></div>
    </div>
  </div>
</div>
<script>
  class DataSet {
    constructor(dates, rows) {
      this.dates = dates;
      this.rows = rows;
    }
    static load(csv) {
      let lines = csv.split('\n')
      let [, , , , ...dates] = lines.shift().split(',')

      dates = dates.map(t => new Date(t).getTime())
      let rows = []

      for (let s of lines.filter(ln => ln.trim() != "")) {
        let state, country, lat, long, values

        [, state, s] = s.match(/^("(?:[^"]*?)"|[^,]*),(.*)/);
        [, country, s] = s.match(/^("(?:[^"]*?)"|[^,]*),(.*)/);
        [lat, long, ...values] = s.split(',');

        if (state == 'Hong Kong') {
          [state, country] = ['', state]
        }

        [, state] = state.match(/^"?(.*?)"?$/);
        [, country] = country.match(/^"?(.*?)"?$/);

        rows.push([[state, country], values.map(s => parseFloat(s))])
      }

      return new DataSet(dates, rows)
    }
    toTimeSeries(filter) {
      let rows = filter ? this.rows.filter(filter) : this.rows;
      return rows.map(([[state, country], row]) => ({
        name: state ? `${state} (${country})` : country,
        data: row.map((e, i) => [this.dates[i], e])
      }))
    }
    relabel(fn) {
      let rows = this.rows.map(([categories, row]) => [fn(categories), [...row]])
      return new DataSet([...this.dates], rows)
    }
    groupByCountry() {
      let countries = new Map()

      for (let [[state, country], row] of this.rows) {
        if (!countries.has(country)) {
          countries.set(country, [...row])
        } else {
          let grouped = countries.get(country)
          row.forEach((e, i) => { grouped[i] += e })
        }
      }

      let rows = Array.from(countries, ([country, row]) => [['', country], row])

      return new DataSet([...this.dates], rows)
    }
  }

  function rowFilter(chart) {
    const e = $(chart)
    return ([[state, country], row]) => {
      let match = true;
      let filterState = e.data('state');
      let filterCountry = e.data('country');
      let filterMin = e.data('min');
      let filterMax = e.data('max');
      let cases = row[row.length - 1] || 0;

      if (filterState && state && filterState != state)
        match = false;
      if (filterCountry && country && filterCountry != country)
        match = false;
      if (filterMin && cases < filterMin)
        match = false;
      if (filterMax && cases > filterMax)
        match = false;

      return match
    }
  }

  // https://github.com/d3/d3-scale-chromatic/blob/master/src/sequential-multi/turbo.js
  function interpolateTurbo(t) {
    t = Math.max(0, Math.min(1, t));
    return "rgb("
      + Math.max(0, Math.min(255, Math.round(34.61 + t * (1172.33 - t * (10793.56 - t * (33300.12 - t * (38394.49 - t * 14825.05))))))) + ", "
      + Math.max(0, Math.min(255, Math.round(23.31 + t * (557.33 + t * (1225.33 - t * (3574.96 - t * (1073.77 + t * 707.56))))))) + ", "
      + Math.max(0, Math.min(255, Math.round(27.2 + t * (3211.1 - t * (15327.97 - t * (27814 - t * (22569.18 - t * 6838.66)))))))
      + ")";
  }

  function renderChart(e, series) {
    const options = {
      chart: {
        type: 'line',
        height: 350
      },
      series: series,
      colors: series.map((e, i) => interpolateTurbo((1 + i) / series.length)),
      dataLabels: {
        enabled: false
      },
      stroke: {
        width: 2
      },
      xaxis: {
        type: 'datetime',
        min: new Date(Date.now() - 30 * 86400000).getTime(),
      },
      yaxis: {
        logarithmic: false
      },
      title: {
        text: 'Chart Title',
      },
      tooltip: {
        x: {
          show: false
        }
      }
    }

    if ($(e).data('scale') == 'logarithmic') {
      options.yaxis = { logarithmic: true }
    }

    if ($(e).data('title')) {
      options.title = { text: $(e).data('title') }
    } else if ($(e).data('country')) {
      options.title = { text: $(e).data('country') }
    }

    renderDelayed(e, options)
  }

  function renderDonut(e, series) {
    const options = {
      chart: {
        type: 'donut',
        height: 350
      },
      series: series.map(([value, label]) => value),
      labels: series.map(([value, label]) => label),
      colors: series.map((e, i) => interpolateTurbo((series.length - i) / series.length)),
      legend: {
        show: false,
      },
      dataLabels: {
        enabled: true,
        formatter: (value, { seriesIndex, dataPointIndex, w }) => {
          const country = w.config.labels[seriesIndex]
          return `${country} - ${value.toFixed(2)}%`
        }
      },
      plotOptions: {
        pie: {
          donut: {
            labels: {
              show: true,
              total: {
                show: true,
                label: $(e).data('title'),
              }
            }
          }
        }
      }
    }
    renderDelayed(e, options)
  }

  function renderDelayed(e, options) {
    const observer = new IntersectionObserver(entries => {
      if (entries[0].isIntersecting) {
        const chart = new ApexCharts(e, options)
        chart.render()
        $('.spinner', e).hide()
        observer.unobserve(e)
      }
    }, { threshold: 0.1 });

    observer.observe(e)
  }

  function mapSeries(datasets, countryCodes, slice) {
    const byCountry = {};

    for (let key in datasets) {
      byCountry[key] = datasets[key].rows
        .map(([[state, country], row]) => [row[slice >= 0 ? slice : row.length + slice], country])
        .reduce((m, [n, c]) => { m[c] = n; return m }, {})
    }

    const series = {}

    for (let country of Object.keys(byCountry.confirmed)) {
      if (country in countryCodes) {
        series[countryCodes[country]] = {
          confirmed: byCountry.confirmed[country],
          deaths: byCountry.deaths[country],
          recovered: byCountry.recovered[country],
        }
      } else {
        console.log(`No country code for ${country}`)
      }
    }

    return {
      data: {
        confirmed: {
          name: 'Confirmed',
          format: '{0}',
          thousandSeparator: ',',
        },
        deaths: {
          name: 'Deaths',
          format: '{0}',
          thousandSeparator: ',',
        },
        recovered: {
          name: 'Recovered',
          format: '{0}',
          thousandSeparator: ',',
        }
      },
      applyData: 'confirmed',
      values: series
    }
  }

  function initMap(datasets, countryCodes) {
    const markers = datasets.confirmed.dates
    const max = markers.length - 1
    const slider = $('#worldMapSlider').attr('max', max).val(max)

    let timer;
    let timeout;

    let playbackStart = function() {
      timer = window.setInterval(() => {
        const next = (parseInt(slider.val()) + 1) % markers.length
        slider.val(next).trigger('input')
        if (next == max) {
          playbackStop()
          timeout = window.setTimeout(playbackStart, 2500)
        }
      }, 250)
    }

    let playbackStop = function() {
      window.clearInterval(timer)
    }

    $('#worldMapPlayback .btn-fast-backward').on('click', function() {
      slider.val(0).trigger('input')
    })

    $('#worldMapPlayback .btn-play').on('click', function() {
      $('.btn-play, .btn-pause', '#worldMapPlayback').toggleClass('d-none')
      playbackStart()
    })

    $('#worldMapPlayback .btn-pause').on('click', function() {
      $('.btn-play, .btn-pause', '#worldMapPlayback').toggleClass('d-none')
      playbackStop()
      window.clearTimeout(timeout)
    })

    $('#worldMapPlayback .btn-fast-forward').on('click', function() {
      slider.val(max).trigger('input')
    })

    const df = new Intl.DateTimeFormat('en-US', { timeZone: 'UTC', dateStyle: 'medium' })
    const low = df.format(new Date(markers[0])).split(',').shift()
    const high = df.format(new Date(markers[max])).split(',').shift()

    $('.slider-lower', '#worldMapSliderLabels').text(low)
    $('.slider-current, .slider-upper', '#worldMapSliderLabels').text(high)

    const theMap = new svgMap({
      targetElementID: 'worldMap',
      colorMax: '#CC0000',
      colorMin: '#FFF0F0',
      data: mapSeries(datasets, countryCodes, max),
    })

    slider.on('input', function() {
      const cur = df.format(new Date(markers[this.value])).split(',').shift()
      $('#worldMapSliderLabels .slider-current').text(cur)

      theMap.options.data = mapSeries(datasets, countryCodes, this.value)
      theMap.applyData(theMap.options.data)
    })

  }

  function topNByCountry(ds, topn) {
    const byCountry = ds.rows.map(([[state, country], row]) => [row.slice(-1)[0], country]).sort(([a], [b]) => b - a)
    const rest = byCountry.slice(topn).reduce((a, [b]) => a + b, 0)
    byCountry.splice(topn, byCountry.length, [rest, 'Others'])
    return byCountry
  }

  $(function () {
    const sources = {
      confirmed: 'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv',
      deaths: 'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_global.csv',
      recovered: 'https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_recovered_global.csv',
    }

    $('.chart')
      .append('<div class="spinner spinner-border"/>')
      .css('min-height', '350px')

    const fetchQueue = []

    for (let src in sources) {
      const ds = fetch(sources[src]).then(resp => resp.text()).then(csv => {
        const dsByCountry = DataSet.load(csv).groupByCountry()
        const dsChinaWorld = dsByCountry.relabel(([state, country]) => ['', country == 'China' ? country : 'World']).groupByCountry()

        $('.chart')
          .filter((i, e) => $(e).data('src') == src)
          .each((i, e) => {
            let view;
            if ($(e).data('view') == 'china-world') {
              view = dsChinaWorld
            } else {
              view = dsByCountry
            }
            renderChart(e, view.toTimeSeries(rowFilter(e)))
          })

        $('.donut')
          .filter((i, e) => $(e).data('src') == src)
          .each((i, e) => {
            renderDonut(e, topNByCountry(dsByCountry, $(e).data('topn')))
          })

        return [src, dsByCountry]
      })
      fetchQueue.push(ds)
    }

    fetchQueue.push(fetch('https://lab.ring0.hk/data/country-codes.json').then(resp => resp.json()))

    const smoothScroll = new SmoothScroll('header nav a', {
      header: 'header nav',
      speedAsDuration: true,
    });

    (function(f) {
      svgMap.prototype.getColor = function(c1, c2, r) {
        r = Math.log10(Math.max(1, r * 100000)) / 5
        return f.call(this, c1, c2, r)
      }
    })(svgMap.prototype.getColor);

    Promise.all(fetchQueue).then((results) => {
      const countryCodes = results.pop()
      const datasets = results.reduce((dss, [src, ds]) => { dss[src] = ds; return dss }, {})
      initMap(datasets, countryCodes);
    })
  })
</script>
{{/layout}}
